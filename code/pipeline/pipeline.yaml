apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: is-build-hello-world
spec:
  workspaces:
    - name: shared-workspace

  params:
    - name: is-source-repo-url
    - name: is-source-directory
      default: is-source
    
    - name: is-infra-repo-url
    - name: is-infra-directory
      default: is-infra

    - name: dockerfile-relative-path-to-infra
      default: Dockerfile

  tasks:
    - name: clone-is-source
      params:
        - name: url
          value: $(params.is-source-repo-url)
        - name: subdirectory
          value: $(params.is-source-directory)
        - name: deleteExisting
          value: "true"
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: clone-is-infra
      params:
        - name: url
          value: $(params.is-infra-repo-url)
        - name: subdirectory
          value: $(params.is-infra-directory)
        - name: deleteExisting
          value: "true"
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace

    - name: resolve-props
      taskRef:
        name: resolve-props
        kind: Task
      runAfter:
        - clone-is-source
      params:
        - name: is-source-directory
          value: $(params.is-source-directory)
      workspaces:
        - name: input
          workspace: shared-workspace


    - name: generate-bar
      params:
        - name: is-source-directory
          value: $(params.is-source-directory)
        - name: is-application-names
          value: $(tasks.resolve-props.results.is-application-names)
        - name: bar-location
          value: $(workspaces.workspace.path)/bars
        - name: bar-filename
          value: $(tasks.resolve-props.results.release-name).bar
      runAfter:
        - resolve-props
      taskRef:
        kind: Task
        name: generate-bar
      workspaces:
        - name: workspace
          workspace: shared-workspace

    - name: build-is-image
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: TLSVERIFY
          value: "false"
        - name: IMAGE
          value: $(tasks.resolve-props.results.registry-host)/$(context.pipelineRun.namespace)/$(tasks.resolve-props.results.release-name):$(tasks.clone-is-source.results.commit)
        - name: DOCKERFILE
          value: $(workspaces.source.path)/$(params.is-infra-directory)/$(params.dockerfile-relative-path-to-infra)
        - name: CONTEXT
          value: $(workspaces.source.path)/bars
      runAfter:
        - generate-bar
      workspaces:
        - name: source
          workspace: shared-workspace

    - name: deploy-is
      taskRef:
        kind: Task
        name: deploy-is
      params:
        - name: is-infra-directory
          value: $(params.is-infra-directory)
        - name: IMAGE
          value: $(tasks.resolve-props.results.registry-host)/$(context.pipelineRun.namespace)/$(tasks.resolve-props.results.release-name):$(tasks.clone-is-source.results.commit)
        - name: release-name
          value: $(tasks.resolve-props.results.release-name)
        - name: configurations
          value: ""
      runAfter:
        - build-is-image
      workspaces:
        - name: input
          workspace: shared-workspace

    # - name: functional-test
    #   params:
    #     - name: is-source-directory
    #       value: $(params.is-source-directory)
    #     - name: release-name
    #       value: $(tasks.resolve-props.results.release-name)
    #     - name: previous-is-genenration
    #       value: $(tasks.resolve-props.results.previous-is-genenration)
    #     - name: previous-deployment-revision
    #       value: $(tasks.resolve-props.results.previous-deployment-revision)
    #     - name: key-certs-secret-name
    #       value: $(params.key-certs-secret-name)
    #     - name: client-key
    #       value: $(params.client-key)
    #     - name: client-cert
    #       value: $(params.client-cert)
    #     - name: ca-cert
    #       value: $(params.ca-cert)
    #   runAfter:
    #     - deploy-is
    #   taskRef:
    #     kind: Task
    #     name: functional-test
    #   workspaces:
    #     - name: workspace
    #       workspace: shared-workspace
